// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TerraDeGoshenAPI.src.Infrastructure;

#nullable disable

namespace TerraDeGoshenAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ColorRefProduct", b =>
                {
                    b.Property<Guid>("ColorsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ColorsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ColorRefProduct");
                });

            modelBuilder.Entity("ProductSizeRef", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SizesId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductsId", "SizesId");

                    b.HasIndex("SizesId");

                    b.ToTable("ProductSizeRef");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.CashRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("CurrentBalance", "TerraDeGoshenAPI.src.Domain.CashRegister.CurrentBalance#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("current_balance");
                        });

                    b.HasKey("Id");

                    b.ToTable("cash_registers", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.CategoryRef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Details", "TerraDeGoshenAPI.src.Domain.CategoryRef.Details#CategoryVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.ColorRef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Details", "TerraDeGoshenAPI.src.Domain.ColorRef.Details#ColorVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("value");
                        });

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<int>("InstallmentCount")
                        .HasColumnType("int")
                        .HasColumnName("installment_count");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("InitialPayment", "TerraDeGoshenAPI.src.Domain.Debt.InitialPayment#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("initial_payment");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TotalAmount", "TerraDeGoshenAPI.src.Domain.Debt.TotalAmount#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("total_amount");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("debts", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.ImageRef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Details", "TerraDeGoshenAPI.src.Domain.ImageRef.Details#ImageVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool?>("IsCover")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("is_cover");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("url");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Installment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DebitId")
                        .HasColumnType("char(36)")
                        .HasColumnName("debit_id");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "TerraDeGoshenAPI.src.Domain.Installment.Amount#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("amount");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("AmountPaid", "TerraDeGoshenAPI.src.Domain.Installment.AmountPaid#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("amount_paid");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DebitId");

                    b.ToTable("installments", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("BackgroundText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("background_text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("CostPrice", "TerraDeGoshenAPI.src.Domain.Product.CostPrice#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("cost_price");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "TerraDeGoshenAPI.src.Domain.Product.Price#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("price");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Stock", "TerraDeGoshenAPI.src.Domain.Product.Stock#StockVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Amount")
                                .HasColumnType("int")
                                .HasColumnName("stock");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.SizeRef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Details", "TerraDeGoshenAPI.src.Domain.SizeRef.Details#SizeVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("value");
                        });

                    b.HasKey("Id");

                    b.ToTable("sizes", (string)null);
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CashRegisterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cash_register_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "TerraDeGoshenAPI.src.Domain.Transaction.Amount#MoneyVO", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)")
                                .HasColumnName("amount");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("ColorRefProduct", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.ColorRef", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraDeGoshenAPI.src.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSizeRef", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraDeGoshenAPI.src.Domain.SizeRef", null)
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Debt", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.Customer", "Customer")
                        .WithMany("Debts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.ImageRef", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Installment", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.Debt", "Debt")
                        .WithMany("Installments")
                        .HasForeignKey("DebitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debt");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Product", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.CategoryRef", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Transaction", b =>
                {
                    b.HasOne("TerraDeGoshenAPI.src.Domain.CashRegister", "CashRegister")
                        .WithMany("Transactions")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraDeGoshenAPI.src.Domain.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TerraDeGoshenAPI.src.Domain.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId");

                    b.Navigation("CashRegister");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.CashRegister", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.CategoryRef", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Customer", b =>
                {
                    b.Navigation("Debts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Debt", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("TerraDeGoshenAPI.src.Domain.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
